{"version":3,"sources":["constants/operatorLabels.tsx","constants/operatorEvalCharacters.tsx","classes/OperatorExpressionPart.ts","classes/NumberExpressionPart.ts","models/DigitListModel.ts","styling/constants.ts","components/Display.tsx","models/InputModel.tsx","models/DigitInputModel.tsx","models/OperatorInputModel.tsx","components/InputButton.tsx","components/Inputs.tsx","components/icons/BackspaceIcon.tsx","components/Calculator.tsx","components/App.tsx","index.tsx","stores/calculatorStore.tsx"],"names":["__webpack_require__","d","__webpack_exports__","operatorLabels","addition","subtraction","multiplication","division","operatorEvalCharacters","OperatorExpressionPart","type","Object","classCallCheck","this","createClass","key","get","NumberExpressionPart","number","C_WebDev_calculator_new_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","C_WebDev_calculator_new_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__","toString","DigitListModel","_class","C_WebDev_calculator_new_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","C_WebDev_calculator_new_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_initializerDefineProperty__WEBPACK_IMPORTED_MODULE_0__","_descriptor","_descriptor2","C_WebDev_calculator_new_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__","value","digit","digits","push","pop","isNegative","digitsString","join","isEmpty","absoluteNumber","parseInt","set","Math","abs","split","map","C_WebDev_calculator_new_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_applyDecoratedDescriptor__WEBPACK_IMPORTED_MODULE_3__","prototype","observable","configurable","enumerable","writable","initializer","action","getOwnPropertyDescriptor","computed","fonts","deviceSizes","mediaQueries","mobile","concat","desktop","Display","observer","renderedExpression","calculatorStore","expression","expressionPart","displayValue","core_browser_esm","css","displayStyles","container","currentDigits","currentDigitsAsNumber","name","styles","css_browser_esm","rgba","InputModel","label","DigitInputModel","_InputModel","_this","possibleConstructorReturn","getPrototypeOf","call","addDigit","inherits","OperatorInputModel","addOperator","isMonospace","currentlySettingOperator","applyDecoratedDescriptor","InputButton","props","model","isActive","innerClassName","classNames","onClick","inputButtonStyles","className","inner","inputModels","clearCurrentDigits","clearEverything","style","marginLeft","viewBox","fill","removeDigit","negateCurrentDigits","calculate","Inputs","renderedInputs","inputModel","index","inputsStyles","Calculator","calculatorStyles","Inputs_Inputs","appStyles","globalStyles","configure","enforceActions","ReactDOM","render","react_default","a","Fragment","document","getElementById","CalculatorStore","finishedWithCurrentExpression","clear","negate","clearExpression","digitsAsNumber","operator","canAddOperator","flushExpressionChanges","evalExpression","evalValue","result","eval","lastExpressionPart","last"],"mappings":"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","file":"static/js/main.13dd760c.chunk.js","sourcesContent":["import { Operator } from \"../types/Operator\"\r\n\r\nexport const operatorLabels: Record<Operator, string> = {\r\n  addition: \"+\",\r\n  subtraction: \"-\",\r\n  multiplication: \"×\",\r\n  division: \"÷\"\r\n}\r\n","import { Operator } from \"../types/Operator\"\r\n\r\nexport const operatorEvalCharacters: Record<Operator, string> = {\r\n  addition: \"+\",\r\n  subtraction: \"-\",\r\n  multiplication: \"*\",\r\n  division: \"/\"\r\n}\r\n","import { operatorEvalCharacters } from \"../constants/operatorEvalCharacters\"\r\nimport { operatorLabels } from \"../constants/operatorLabels\"\r\nimport { ExpressionPart } from \"../types/ExpressionPart\"\r\nimport { Operator } from \"../types/Operator\"\r\n\r\nexport class OperatorExpressionPart implements ExpressionPart {\r\n  constructor(public type: Operator) {}\r\n\r\n  public get displayValue() {\r\n    return operatorLabels[this.type]\r\n  }\r\n\r\n  public get evalValue() {\r\n    return operatorEvalCharacters[this.type]\r\n  }\r\n}\r\n","import { ExpressionPart } from \"../types/ExpressionPart\"\r\n\r\nexport class NumberExpressionPart implements ExpressionPart {\r\n  constructor(public number: number) {}\r\n\r\n  public get displayValue() {\r\n    return this.number.toString()\r\n  }\r\n\r\n  public get evalValue() {\r\n    return this.number.toString()\r\n  }\r\n}\r\n","import { action, computed, observable } from \"mobx\"\r\nimport { isEmpty } from \"ramda\"\r\nimport { Digit } from \"../types/Digit\"\r\n\r\nconst isNegative = (number: number) => number < 0\r\n\r\nexport class DigitListModel {\r\n  @observable\r\n  public digits: Digit[] = []\r\n\r\n  @observable\r\n  public isNegative = false\r\n\r\n  @action\r\n  public addDigit(digit: Digit) {\r\n    this.digits.push(digit)\r\n  }\r\n\r\n  @action\r\n  public removeDigit() {\r\n    this.digits.pop()\r\n  }\r\n\r\n  @action\r\n  public clear() {\r\n    this.digits = []\r\n    this.isNegative = false\r\n  }\r\n\r\n  @action\r\n  public negate() {\r\n    this.isNegative = !this.isNegative\r\n  }\r\n\r\n  @computed\r\n  public get digitsAsNumber() {\r\n    const digitsString = this.digits.join(\"\")\r\n    if (isEmpty(digitsString)) return 0\r\n\r\n    const absoluteNumber = parseInt(digitsString)\r\n    if (this.isNegative) return -absoluteNumber\r\n    return absoluteNumber\r\n  }\r\n\r\n  public set digitsAsNumber(number) {\r\n    const absoluteNumber = Math.abs(number)\r\n\r\n    this.isNegative = isNegative(number)\r\n\r\n    this.digits = absoluteNumber\r\n      .toString()\r\n      .split(\"\")\r\n      .map(digit => parseInt(digit) as Digit)\r\n  }\r\n}\r\n","export const fonts = {\r\n  normal: `\"Montserrat\", sans-serif`,\r\n  monospace: \"monospace\"\r\n}\r\n\r\nexport const colors = {\r\n  primary: \"#00bfa5\",\r\n  error: \"#d50000\"\r\n}\r\n\r\nconst deviceSizes = {\r\n  desktop: \"500px\"\r\n}\r\n\r\nexport const mediaQueries = {\r\n  mobile: `(max-width: ${deviceSizes.desktop})`,\r\n  desktop: `(min-width: ${deviceSizes.desktop})`\r\n}\r\n","import css from \"@emotion/css\"\r\nimport { observer } from \"mobx-react-lite\"\r\nimport { rgba } from \"polished\"\r\nimport { calculatorStore } from \"../stores/calculatorStore\"\r\n\r\nexport const Display = observer(() => {\r\n  const renderedExpression = calculatorStore.expression\r\n    .map(expressionPart => expressionPart.displayValue)\r\n    .join(\" \")\r\n\r\n  return (\r\n    <div css={displayStyles.container}>\r\n      <p css={displayStyles.expression}>{renderedExpression}&nbsp;</p>\r\n      <p css={displayStyles.currentDigits}>\r\n        {calculatorStore.currentDigitsAsNumber}\r\n      </p>\r\n    </div>\r\n  )\r\n})\r\n\r\nconst displayStyles = {\r\n  container: css`\r\n    background-color: #3e4c4e;\r\n    padding: 20px;\r\n  `,\r\n\r\n  expression: css`\r\n    margin-bottom: 5px;\r\n    color: ${rgba(\"white\", 0.7)};\r\n    font-weight: 500;\r\n    font-size: 14px;\r\n    text-align: right;\r\n  `,\r\n\r\n  currentDigits: css`\r\n    color: ${rgba(\"white\", 0.7)};\r\n    font-weight: 600;\r\n    font-size: 22px;\r\n    text-align: right;\r\n  `\r\n}\r\n","import { ReactNode } from \"react\"\r\n\r\nexport interface InputModel {\r\n  isActive?: boolean\r\n  isMonospace?: boolean\r\n}\r\n\r\nexport class InputModel {\r\n  constructor(public label: ReactNode, public action?: () => unknown) {}\r\n}\r\n","import { calculatorStore } from \"../stores/calculatorStore\"\r\nimport { Digit } from \"../types/Digit\"\r\nimport { InputModel } from \"./InputModel\"\r\n\r\nexport class DigitInputModel extends InputModel {\r\n  constructor(private digit: Digit) {\r\n    super(digit)\r\n  }\r\n\r\n  public action = () => calculatorStore.addDigit(this.digit)\r\n}\r\n","import { computed } from \"mobx\"\r\nimport { operatorLabels } from \"../constants/operatorLabels\"\r\nimport { calculatorStore } from \"../stores/calculatorStore\"\r\nimport { Operator } from \"../types/Operator\"\r\nimport { InputModel } from \"./InputModel\"\r\n\r\nexport class OperatorInputModel extends InputModel {\r\n  constructor(private type: Operator) {\r\n    super(operatorLabels[type])\r\n  }\r\n\r\n  public action = () => calculatorStore.addOperator(this.type)\r\n  public isMonospace = true\r\n\r\n  @computed\r\n  public get isActive() {\r\n    return calculatorStore.currentlySettingOperator === this.type\r\n  }\r\n}\r\n","import css from \"@emotion/css\"\r\nimport classNames from \"classnames\"\r\nimport { observer } from \"mobx-react-lite\"\r\nimport { rgba } from \"polished\"\r\nimport { InputModel } from \"../models/InputModel\"\r\nimport { OperatorInputModel } from \"../models/OperatorInputModel\"\r\nimport { fonts, mediaQueries } from \"../styling/constants\"\r\n\r\ninterface InputButtonProps {\r\n  model: InputModel\r\n}\r\n\r\nexport const InputButton: React.FC<InputButtonProps> = observer(props => {\r\n  const { model } = props\r\n  const { label, action, isActive, isMonospace } = model\r\n  const innerClassName = classNames({ isActive, isMonospace })\r\n\r\n  return (\r\n    <button onClick={action} css={inputButtonStyles.container}>\r\n      <span className={innerClassName} css={inputButtonStyles.inner}>\r\n        {label}\r\n      </span>\r\n    </button>\r\n  )\r\n})\r\n\r\nconst inputButtonStyles = {\r\n  container: css`\r\n    position: relative;\r\n    padding-bottom: 100%;\r\n    border: none;\r\n    background: none;\r\n    outline: none;\r\n    cursor: pointer;\r\n  `,\r\n\r\n  inner: css`\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    color: ${rgba(\"white\", 0.8)};\r\n    font-weight: 400;\r\n    border: 3px solid #2dabbc;\r\n    border-radius: 50%;\r\n\r\n    transition: transform 50ms ease-in-out, background-color 100ms ease-in-out;\r\n\r\n    &:active {\r\n      transform: scale(0.9);\r\n    }\r\n\r\n    &.isActive {\r\n      background-color: #2dabbc;\r\n    }\r\n\r\n    &.isMonospace {\r\n      font-family: ${fonts.monospace};\r\n      line-height: 1px;\r\n    }\r\n\r\n    @media ${mediaQueries.mobile} {\r\n      font-size: 6vw;\r\n\r\n      svg {\r\n        height: 6vw;\r\n      }\r\n    }\r\n\r\n    @media ${mediaQueries.desktop} {\r\n      font-size: 18px;\r\n\r\n      svg {\r\n        height: 18px;\r\n      }\r\n\r\n      &:hover,\r\n      &:focus {\r\n        background-color: #2dabbc;\r\n      }\r\n    }\r\n  `\r\n}\r\n","import css from \"@emotion/css\"\r\nimport { DigitInputModel } from \"../models/DigitInputModel\"\r\nimport { InputModel } from \"../models/InputModel\"\r\nimport { OperatorInputModel } from \"../models/OperatorInputModel\"\r\nimport { calculatorStore } from \"../stores/calculatorStore\"\r\nimport { BackspaceIcon } from \"./icons/BackspaceIcon\"\r\nimport { InputButton } from \"./InputButton\"\r\n\r\nconst inputModels: InputModel[] = [\r\n  new InputModel(\"CE\", () => calculatorStore.clearCurrentDigits()),\r\n  new InputModel(\"C\", () => calculatorStore.clearEverything()),\r\n  new InputModel(<BackspaceIcon />, () => calculatorStore.removeDigit()),\r\n  new OperatorInputModel(\"division\"),\r\n  new DigitInputModel(7),\r\n  new DigitInputModel(8),\r\n  new DigitInputModel(9),\r\n  new OperatorInputModel(\"multiplication\"),\r\n  new DigitInputModel(4),\r\n  new DigitInputModel(5),\r\n  new DigitInputModel(6),\r\n  new OperatorInputModel(\"subtraction\"),\r\n  new DigitInputModel(1),\r\n  new DigitInputModel(2),\r\n  new DigitInputModel(3),\r\n  new OperatorInputModel(\"addition\"),\r\n  new InputModel(\"±\", () => calculatorStore.negateCurrentDigits()),\r\n  new DigitInputModel(0),\r\n  new InputModel(\",\", () => {}),\r\n  new InputModel(\"=\", () => calculatorStore.calculate())\r\n]\r\n\r\nexport const Inputs = () => {\r\n  const renderedInputs = inputModels.map((inputModel, index) => (\r\n    <InputButton key={index} model={inputModel} />\r\n  ))\r\n\r\n  return <div css={inputsStyles.container}>{renderedInputs}</div>\r\n}\r\n\r\nconst inputsStyles = {\r\n  container: css`\r\n    display: grid;\r\n    grid-template-columns: repeat(4, 1fr);\r\n    grid-gap: 20px;\r\n    padding: 20px;\r\n    background-color: #334446;\r\n  `\r\n}\r\n","export const BackspaceIcon = () => (\r\n  <svg style={{ marginLeft: -2 }} viewBox=\"0 0 24 24\">\r\n    <path\r\n      fill=\"currentColor\"\r\n      d=\"M19,15.59L17.59,17L14,13.41L10.41,17L9,15.59L12.59,12L9,8.41L10.41,7L14,10.59L17.59,7L19,8.41L15.41,12L19,15.59M22,3A2,2 0 0,1 24,5V19A2,2 0 0,1 22,21H7C6.31,21 5.77,20.64 5.41,20.11L0,12L5.41,3.88C5.77,3.35 6.31,3 7,3H22M22,5H7L2.28,12L7,19H22V5Z\"\r\n    />\r\n  </svg>\r\n)\r\n","import css from \"@emotion/css\"\r\nimport { observer } from \"mobx-react-lite\"\r\nimport { mediaQueries } from \"../styling/constants\"\r\nimport { Display } from \"./Display\"\r\nimport { Inputs } from \"./Inputs\"\r\n\r\nexport const Calculator = observer(() => {\r\n  return (\r\n    <div css={calculatorStyles.container}>\r\n      <Display />\r\n      <Inputs />\r\n    </div>\r\n  )\r\n})\r\n\r\nconst calculatorStyles = {\r\n  container: css`\r\n    width: 100%;\r\n    border-radius: 4px;\r\n    overflow: hidden;\r\n    margin: auto;\r\n\r\n    @media ${mediaQueries.mobile} {\r\n      max-width: calc(100% - 20px);\r\n    }\r\n\r\n    @media ${mediaQueries.desktop} {\r\n      width: 300px;\r\n    }\r\n  `\r\n}\r\n","import { css, Global } from \"@emotion/core\"\r\nimport React from \"react\"\r\nimport { fonts } from \"../styling/constants\"\r\nimport { Calculator } from \"./Calculator\"\r\n\r\nexport const App = () => {\r\n  return (\r\n    <>\r\n      <div css={appStyles.container}>\r\n        <Calculator />\r\n      </div>\r\n\r\n      <Global styles={globalStyles} />\r\n    </>\r\n  )\r\n}\r\n\r\nconst appStyles = {\r\n  container: css`\r\n    display: flex;\r\n    flex-direction: column;\r\n    min-height: 100vh;\r\n    background-color: #212c2d;\r\n  `\r\n}\r\n\r\nconst globalStyles = css`\r\n  .js-focus-visible *:focus:not(.focus-visible) {\r\n    outline: none;\r\n  }\r\n\r\n  * {\r\n    box-sizing: border-box;\r\n    margin: 0;\r\n    padding: 0;\r\n    text-decoration: inherit;\r\n    color: inherit;\r\n    font-family: inherit;\r\n  }\r\n\r\n  body {\r\n    background-color: hsl(0, 0%, 93%);\r\n    overflow-y: scroll;\r\n  }\r\n\r\n  h1,\r\n  h2,\r\n  h3,\r\n  h4,\r\n  h5,\r\n  h6 {\r\n    font-weight: 500;\r\n  }\r\n\r\n  html,\r\n  body {\r\n    font-family: ${fonts.normal};\r\n    font-weight: 400;\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n  }\r\n`\r\n","import { configure } from \"mobx\"\r\nimport React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport { App } from \"./components/App\"\r\n\r\nconfigure({\r\n  enforceActions: \"always\"\r\n})\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"))\r\n","import { action, computed, observable } from \"mobx\"\r\nimport { isEmpty, last } from \"ramda\"\r\nimport { NumberExpressionPart } from \"../classes/NumberExpressionPart\"\r\nimport { OperatorExpressionPart } from \"../classes/OperatorExpressionPart\"\r\nimport { DigitListModel } from \"../models/DigitListModel\"\r\nimport { Digit } from \"../types/Digit\"\r\nimport { ExpressionPart } from \"../types/ExpressionPart\"\r\nimport { Operator } from \"../types/Operator\"\r\n\r\nclass CalculatorStore {\r\n  private finishedWithCurrentExpression = false\r\n\r\n  private currentDigits = new DigitListModel()\r\n\r\n  public addDigit(digit: Digit) {\r\n    if (this.finishedWithCurrentExpression) {\r\n      this.clearCurrentDigits()\r\n      this.finishedWithCurrentExpression = false\r\n    }\r\n\r\n    this.currentDigits.addDigit(digit)\r\n  }\r\n\r\n  public removeDigit() {\r\n    this.currentDigits.removeDigit()\r\n  }\r\n\r\n  public clearCurrentDigits() {\r\n    this.currentDigits.clear()\r\n  }\r\n\r\n  public negateCurrentDigits() {\r\n    this.currentDigits.negate()\r\n  }\r\n\r\n  @computed\r\n  public get currentDigitsAsNumber() {\r\n    return this.currentDigits.digitsAsNumber\r\n  }\r\n\r\n  @observable\r\n  public expression: ExpressionPart[] = []\r\n\r\n  @computed\r\n  public get currentlySettingOperator() {\r\n    const lastExpressionPart = last(this.expression)\r\n    if (!(lastExpressionPart instanceof OperatorExpressionPart)) return\r\n    return lastExpressionPart.type\r\n  }\r\n\r\n  @action\r\n  public clearExpression() {\r\n    this.expression = []\r\n  }\r\n\r\n  public clearEverything() {\r\n    this.clearCurrentDigits()\r\n    this.clearExpression()\r\n  }\r\n\r\n  @computed\r\n  private get canAddOperator() {\r\n    return !isEmpty(this.currentDigits.digits)\r\n  }\r\n\r\n  @action\r\n  private flushExpressionChanges() {\r\n    if (!isEmpty(this.currentDigits.digits)) {\r\n      this.expression.push(\r\n        new NumberExpressionPart(this.currentDigits.digitsAsNumber)\r\n      )\r\n    }\r\n  }\r\n\r\n  @action\r\n  public addOperator(operator: Operator) {\r\n    if (!this.canAddOperator && !this.currentlySettingOperator) return\r\n    if (this.currentlySettingOperator) this.expression.pop()\r\n\r\n    this.flushExpressionChanges()\r\n\r\n    this.clearCurrentDigits()\r\n    this.expression.push(new OperatorExpressionPart(operator))\r\n    this.finishedWithCurrentExpression = false\r\n  }\r\n\r\n  @action\r\n  public calculate() {\r\n    if (!this.canAddOperator) return\r\n\r\n    this.flushExpressionChanges()\r\n\r\n    const evalExpression = this.expression\r\n      .map(expressionPart => expressionPart.evalValue)\r\n      .join(\" \")\r\n\r\n    const result: number = eval(evalExpression)\r\n    this.currentDigits.digitsAsNumber = result\r\n\r\n    this.clearExpression()\r\n\r\n    this.finishedWithCurrentExpression = true\r\n  }\r\n}\r\n\r\nexport const calculatorStore = new CalculatorStore()\r\n"],"sourceRoot":""}