{"version":3,"sources":["components/Calculator.tsx","components/App.tsx","index.tsx","styling/constants.ts"],"names":["operatorLabels","addition","subtraction","multiplication","division","operatorEvalCharacters","isNegative","number","OperatorExpressionPart","type","Object","C_WebDev_calculator_new_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_4__","this","NumberExpressionPart","toString","DigitList","digit","digits","push","pop","digitsString","join","isEmpty","absoluteNumber","parseInt","Math","abs","split","map","observable","action","computed","CalculatorStore","finishedWithCurrentExpression","currentDigits","clearCurrentDigits","addDigit","removeDigit","clear","negate","expression","clearExpression","digitsAsNumber","operator","canAddOperator","flushExpressionChanges","evalExpression","expressionPart","evalValue","result","eval","calculatorStore","Display","observer","renderedExpression","displayValue","_emotion_core__WEBPACK_IMPORTED_MODULE_7__","css","displayStyles","container","currentDigitsAsNumber","name","styles","_emotion_css__WEBPACK_IMPORTED_MODULE_6__","rgba","BackspaceIcon","viewBox","fill","d","inputs","label","clearEverything","addOperator","negateCurrentDigits","calculate","InputButton","props","C_WebDev_calculator_new_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__","inputButtonStyles","inner","children","mediaQueries","mobile","desktop","Inputs","renderedInputs","input","index","key","onClick","inputsStyles","Calculator","calculatorStyles","appStyles","globalStyles","font","configure","enforceActions","ReactDOM","render","core_browser_esm","react_default","a","Fragment","document","getElementById","__webpack_require__","__webpack_exports__","deviceSizes","concat"],"mappings":"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","file":"static/js/main.af3e748b.chunk.js","sourcesContent":["import css from \"@emotion/css\"\r\nimport { action, computed, observable } from \"mobx\"\r\nimport { observer } from \"mobx-react-lite\"\r\nimport { rgba } from \"polished\"\r\nimport { isEmpty } from \"ramda\"\r\nimport { mediaQueries } from \"../styling/constants\"\r\n\r\ntype Operator = \"addition\" | \"subtraction\" | \"multiplication\" | \"division\"\r\n\r\nconst operatorLabels: Record<Operator, string> = {\r\n  addition: \"+\",\r\n  subtraction: \"-\",\r\n  multiplication: \"ร\",\r\n  division: \"รท\"\r\n}\r\n\r\nconst operatorEvalCharacters: Record<Operator, string> = {\r\n  addition: \"+\",\r\n  subtraction: \"-\",\r\n  multiplication: \"*\",\r\n  division: \"/\"\r\n}\r\n\r\nconst isNegative = (number: number) => number < 0\r\n\r\ninterface ExpressionPart {\r\n  displayValue: string\r\n  evalValue: string\r\n}\r\n\r\nclass OperatorExpressionPart implements ExpressionPart {\r\n  constructor(public type: Operator) {}\r\n\r\n  public get displayValue() {\r\n    return operatorLabels[this.type]\r\n  }\r\n\r\n  public get evalValue() {\r\n    return operatorEvalCharacters[this.type]\r\n  }\r\n}\r\n\r\nclass NumberExpressionPart implements ExpressionPart {\r\n  constructor(public number: number) {}\r\n\r\n  public get displayValue() {\r\n    return this.number.toString()\r\n  }\r\n\r\n  public get evalValue() {\r\n    return this.number.toString()\r\n  }\r\n}\r\n\r\n// const useLocalStore = <T extends any>(storeClass: new () => T) => {\r\n//   const instance = useMemo(() => new storeClass(), [])\r\n\r\n//   return instance\r\n// }\r\n\r\ntype Digit = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9\r\n\r\nclass DigitList {\r\n  @observable\r\n  public digits: Digit[] = []\r\n\r\n  @observable\r\n  public isNegative = false\r\n\r\n  @action\r\n  public addDigit(digit: Digit) {\r\n    this.digits.push(digit)\r\n  }\r\n\r\n  @action\r\n  public removeDigit() {\r\n    this.digits.pop()\r\n  }\r\n\r\n  @action\r\n  public clear() {\r\n    this.digits = []\r\n    this.isNegative = false\r\n  }\r\n\r\n  @action\r\n  public negate() {\r\n    this.isNegative = !this.isNegative\r\n  }\r\n\r\n  @computed\r\n  public get digitsAsNumber() {\r\n    const digitsString = this.digits.join(\"\")\r\n    if (isEmpty(digitsString)) return 0\r\n\r\n    const absoluteNumber = parseInt(digitsString)\r\n    if (this.isNegative) return -absoluteNumber\r\n    return absoluteNumber\r\n  }\r\n\r\n  public set digitsAsNumber(number) {\r\n    const absoluteNumber = Math.abs(number)\r\n\r\n    this.isNegative = isNegative(number)\r\n\r\n    this.digits = absoluteNumber\r\n      .toString()\r\n      .split(\"\")\r\n      .map(digit => parseInt(digit) as Digit)\r\n  }\r\n}\r\n\r\nclass CalculatorStore {\r\n  private finishedWithCurrentExpression = false\r\n\r\n  private currentDigits = new DigitList()\r\n\r\n  public addDigit(digit: Digit) {\r\n    if (this.finishedWithCurrentExpression) {\r\n      this.clearCurrentDigits()\r\n      this.finishedWithCurrentExpression = false\r\n    }\r\n\r\n    this.currentDigits.addDigit(digit)\r\n  }\r\n\r\n  public removeDigit() {\r\n    this.currentDigits.removeDigit()\r\n  }\r\n\r\n  public clearCurrentDigits() {\r\n    this.currentDigits.clear()\r\n  }\r\n\r\n  public negateCurrentDigits() {\r\n    this.currentDigits.negate()\r\n  }\r\n\r\n  @computed\r\n  public get currentDigitsAsNumber() {\r\n    return this.currentDigits.digitsAsNumber\r\n  }\r\n\r\n  @observable\r\n  public expression: ExpressionPart[] = []\r\n\r\n  @action\r\n  public clearExpression() {\r\n    this.expression = []\r\n  }\r\n\r\n  public clearEverything() {\r\n    this.clearCurrentDigits()\r\n    this.clearExpression()\r\n  }\r\n\r\n  private get canAddOperator() {\r\n    return !isEmpty(this.currentDigits.digits)\r\n  }\r\n\r\n  @action\r\n  private flushExpressionChanges() {\r\n    if (!isEmpty(this.currentDigits.digits)) {\r\n      this.expression.push(\r\n        new NumberExpressionPart(this.currentDigits.digitsAsNumber)\r\n      )\r\n    }\r\n  }\r\n\r\n  @action\r\n  public addOperator(operator: Operator) {\r\n    if (!this.canAddOperator) return\r\n\r\n    this.flushExpressionChanges()\r\n\r\n    this.clearCurrentDigits()\r\n    this.expression.push(new OperatorExpressionPart(operator))\r\n    this.finishedWithCurrentExpression = false\r\n  }\r\n\r\n  @action\r\n  public calculate() {\r\n    if (!this.canAddOperator) return\r\n\r\n    this.flushExpressionChanges()\r\n\r\n    const evalExpression = this.expression\r\n      .map(expressionPart => expressionPart.evalValue)\r\n      .join(\" \")\r\n\r\n    const result: number = eval(evalExpression)\r\n    this.currentDigits.digitsAsNumber = result\r\n\r\n    this.clearExpression()\r\n\r\n    this.finishedWithCurrentExpression = true\r\n  }\r\n}\r\n\r\nconst calculatorStore = new CalculatorStore()\r\n\r\nexport const Display = observer(() => {\r\n  const renderedExpression = calculatorStore.expression\r\n    .map(expressionPart => expressionPart.displayValue)\r\n    .join(\" \")\r\n\r\n  return (\r\n    <div css={displayStyles.container}>\r\n      <p css={displayStyles.expression}>{renderedExpression}&nbsp;</p>\r\n      <p css={displayStyles.currentDigits}>\r\n        {calculatorStore.currentDigitsAsNumber}\r\n      </p>\r\n    </div>\r\n  )\r\n})\r\n\r\nconst displayStyles = {\r\n  container: css`\r\n    background-color: #3e4c4e;\r\n    padding: 20px;\r\n  `,\r\n\r\n  expression: css`\r\n    margin-bottom: 5px;\r\n    color: ${rgba(\"white\", 0.7)};\r\n    font-weight: 500;\r\n    font-size: 14px;\r\n    text-align: right;\r\n  `,\r\n\r\n  currentDigits: css`\r\n    color: ${rgba(\"white\", 0.7)};\r\n    font-weight: 600;\r\n    font-size: 16px;\r\n    text-align: right;\r\n  `\r\n}\r\n\r\nconst BackspaceIcon = () => (\r\n  <svg viewBox=\"0 0 24 24\">\r\n    <path\r\n      fill=\"currentColor\"\r\n      d=\"M19,15.59L17.59,17L14,13.41L10.41,17L9,15.59L12.59,12L9,8.41L10.41,7L14,10.59L17.59,7L19,8.41L15.41,12L19,15.59M22,3A2,2 0 0,1 24,5V19A2,2 0 0,1 22,21H7C6.31,21 5.77,20.64 5.41,20.11L0,12L5.41,3.88C5.77,3.35 6.31,3 7,3H22M22,5H7L2.28,12L7,19H22V5Z\"\r\n    />\r\n  </svg>\r\n)\r\n\r\nconst inputs = [\r\n  { label: \"CE\", action: () => calculatorStore.clearCurrentDigits() },\r\n  { label: \"C\", action: () => calculatorStore.clearEverything() },\r\n  { label: <BackspaceIcon />, action: () => calculatorStore.removeDigit() },\r\n  { label: \"รท\", action: () => calculatorStore.addOperator(\"division\") },\r\n  { label: \"7\", action: () => calculatorStore.addDigit(7) },\r\n  { label: \"8\", action: () => calculatorStore.addDigit(8) },\r\n  { label: \"9\", action: () => calculatorStore.addDigit(9) },\r\n  { label: \"ร\", action: () => calculatorStore.addOperator(\"multiplication\") },\r\n  { label: \"4\", action: () => calculatorStore.addDigit(4) },\r\n  { label: \"5\", action: () => calculatorStore.addDigit(5) },\r\n  { label: \"6\", action: () => calculatorStore.addDigit(6) },\r\n  { label: \"โ\", action: () => calculatorStore.addOperator(\"subtraction\") },\r\n  { label: \"1\", action: () => calculatorStore.addDigit(1) },\r\n  { label: \"2\", action: () => calculatorStore.addDigit(2) },\r\n  { label: \"3\", action: () => calculatorStore.addDigit(3) },\r\n  { label: \"+\", action: () => calculatorStore.addOperator(\"addition\") },\r\n  { label: \"ยฑ\", action: () => calculatorStore.negateCurrentDigits() },\r\n  { label: \"0\", action: () => calculatorStore.addDigit(0) },\r\n  { label: \",\", action: () => {} },\r\n  { label: \"=\", action: () => calculatorStore.calculate() }\r\n]\r\n\r\ntype InputButtonProps = React.ButtonHTMLAttributes<HTMLButtonElement>\r\n\r\nexport const InputButton: React.FC<InputButtonProps> = props => {\r\n  return (\r\n    <button {...props} css={inputButtonStyles.container}>\r\n      <span css={inputButtonStyles.inner}>{props.children}</span>\r\n    </button>\r\n  )\r\n}\r\n\r\nconst inputButtonStyles = {\r\n  container: css`\r\n    position: relative;\r\n    padding-bottom: 100%;\r\n    border: none;\r\n    background: none;\r\n    outline: none;\r\n  `,\r\n\r\n  inner: css`\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    color: ${rgba(\"white\", 0.85)};\r\n    font-weight: 400;\r\n    border: 3px solid #2dabbc;\r\n    border-radius: 50%;\r\n\r\n    transition: transform 50ms ease-in-out, background-color 100ms ease-in-out;\r\n\r\n    &:active {\r\n      transform: scale(0.9);\r\n    }\r\n\r\n    @media ${mediaQueries.mobile} {\r\n      font-size: 6vw;\r\n\r\n      svg {\r\n        height: 6vw;\r\n      }\r\n    }\r\n\r\n    @media ${mediaQueries.desktop} {\r\n      font-size: 18px;\r\n\r\n      svg {\r\n        height: 18px;\r\n      }\r\n\r\n      &:hover,\r\n      &:focus {\r\n        background-color: #2dabbc;\r\n      }\r\n    }\r\n  `\r\n}\r\nexport const Inputs = () => {\r\n  const renderedInputs = inputs.map((input, index) => (\r\n    <InputButton key={index} onClick={input.action}>\r\n      {input.label}\r\n    </InputButton>\r\n  ))\r\n\r\n  return <div css={inputsStyles.container}>{renderedInputs}</div>\r\n}\r\n\r\nconst inputsStyles = {\r\n  container: css`\r\n    display: grid;\r\n    grid-template-columns: repeat(4, 1fr);\r\n    grid-gap: 20px;\r\n    padding: 20px;\r\n    background-color: #334446;\r\n  `\r\n}\r\n\r\nexport const Calculator = observer(() => {\r\n  return (\r\n    <div css={calculatorStyles.container}>\r\n      <Display />\r\n      <Inputs />\r\n    </div>\r\n  )\r\n})\r\n\r\nconst calculatorStyles = {\r\n  container: css`\r\n    width: 100%;\r\n    border-radius: 4px;\r\n    overflow: hidden;\r\n    margin: auto;\r\n\r\n    @media ${mediaQueries.mobile} {\r\n      max-width: calc(100% - 20px);\r\n    }\r\n\r\n    @media ${mediaQueries.desktop} {\r\n      width: 300px;\r\n    }\r\n  `\r\n}\r\n","import { css, Global } from \"@emotion/core\"\r\nimport React from \"react\"\r\nimport { font } from \"../styling/constants\"\r\nimport { Calculator } from \"./Calculator\"\r\n\r\nexport const App = () => {\r\n  return (\r\n    <>\r\n      <div css={appStyles.container}>\r\n        <Calculator />\r\n      </div>\r\n\r\n      <Global styles={globalStyles} />\r\n    </>\r\n  )\r\n}\r\n\r\nconst appStyles = {\r\n  container: css`\r\n    display: flex;\r\n    flex-direction: column;\r\n    min-height: 100vh;\r\n    background-color: #212c2d;\r\n  `\r\n}\r\n\r\nconst globalStyles = css`\r\n  .js-focus-visible *:focus:not(.focus-visible) {\r\n    outline: none;\r\n  }\r\n\r\n  * {\r\n    box-sizing: border-box;\r\n    margin: 0;\r\n    padding: 0;\r\n    text-decoration: inherit;\r\n    color: inherit;\r\n    font-family: inherit;\r\n  }\r\n\r\n  body {\r\n    background-color: hsl(0, 0%, 93%);\r\n    overflow-y: scroll;\r\n  }\r\n\r\n  h1,\r\n  h2,\r\n  h3,\r\n  h4,\r\n  h5,\r\n  h6 {\r\n    font-weight: 500;\r\n  }\r\n\r\n  html,\r\n  body {\r\n    font-family: ${font};\r\n    font-weight: 400;\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n  }\r\n`\r\n","import { configure } from \"mobx\"\r\nimport React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport { App } from \"./components/App\"\r\n\r\nconfigure({\r\n  enforceActions: \"always\"\r\n})\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"))\r\n","export const font = `\"Montserrat\", sans-serif`\r\n\r\nexport const colors = {\r\n  primary: \"#00bfa5\",\r\n  error: \"#d50000\"\r\n}\r\n\r\nconst deviceSizes = {\r\n  desktop: \"500px\"\r\n}\r\n\r\nexport const mediaQueries = {\r\n  mobile: `(max-width: ${deviceSizes.desktop})`,\r\n  desktop: `(min-width: ${deviceSizes.desktop})`\r\n}\r\n"],"sourceRoot":""}